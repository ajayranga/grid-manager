{"version":3,"file":"static/js/757.ce3a377f.chunk.js","mappings":"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","sources":["pages/dashboard/features/AlertsTable/slice/saga.js","pages/dashboard/features/AlertsTable/slice/index.js","pages/dashboard/features/AlertsTable/slice/selectors.js","pages/dashboard/features/AlertsTable/index.js","pages/dashboard/features/CreateAlert/slice/saga.js","pages/dashboard/features/CreateAlert/slice/index.js","pages/dashboard/features/CreateAlert/slice/selectors.js"],"sourcesContent":["import { call, put, takeLatest, delay, select } from 'redux-saga/effects';\nimport { createAlertActions as actions } from '../slice';\nimport { request } from 'utils/request';\nimport { selectToken } from 'pages/Login/slice/selectors';\n\nconst fetchAlert = function* (action) {\n  delay(10);\n  try {\n    const pageNum = action.payload.pageNum ? action.payload.pageNum : 1;\n    const requestURL = `/api/alert?pageNum=${pageNum}`;\n    const token = yield select(selectToken);\n    if (token === '') {\n      yield put(actions.failed('No Token found'));\n    } else {\n      const data = yield call(request, requestURL, {\n        method: 'get',\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      yield put(actions.done(data));\n      yield put(actions.success());\n    }\n  } catch (error) {\n    process.env.NODE_ENV === 'development' && console.log(error);\n    yield put(\n      actions.failed(\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message\n      )\n    );\n  }\n};\nconst deleteStart = function* (action) {\n  delay(10);\n  try {\n    const _id = action.payload.id ? action.payload.id : '';\n    const pageNum = action.payload.pageNum ? action.payload.pageNum : '';\n    const requestURL = `/api/alert/${_id}?pageNum=${pageNum}`;\n    const token = yield select(selectToken);\n    if (token === '') {\n      yield put(actions.failed('No Token found'));\n    } else {\n      const data = yield call(request, requestURL, {\n        method: 'delete',\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      yield put(actions.done(data));\n      yield put(actions.success());\n    }\n  } catch (error) {\n    process.env.NODE_ENV === 'development' && console.log(error);\n    yield put(\n      actions.failed(\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message\n      )\n    );\n  }\n};\n\nexport const getAlertSaga = function* () {\n  yield takeLatest(actions.fetch.type, fetchAlert);\n  yield takeLatest(actions.delete.type, deleteStart);\n};\n","import { createSlice } from '@reduxjs/toolkit';\nimport { useInjectReducer, useInjectSaga } from 'redux-injectors';\nimport { getAlertSaga } from './saga';\n\nexport const initialState = {\n  allAlerts: [],\n  pageNum: 1,\n  totalAlerts: 0,\n  loading: false,\n  error: '',\n  success: false,\n};\n\nconst allAlertSlice = createSlice({\n  name: 'allAlerts',\n  initialState,\n  reducers: {\n    fetch(state, action) {\n      state.loading = true;\n    },\n    done(state, action) {\n      state.allAlerts = action.payload.allAlerts;\n      state.pageNum = action.payload.pageNum;\n      state.totalAlerts = action.payload.totalAlerts;\n      state.loading = false;\n    },\n    success(state, action) {\n      state.error = '';\n      state.loading = false;\n      state.success = true;\n    },\n    failed(state, action) {\n      state.error = action.payload;\n      state.loading = false;\n    },\n    reset(state, action) {\n      state.error = '';\n      state.loading = false;\n      state.success = false;\n    },\n    delete(state, action) {\n      state.loading = true;\n    },\n  },\n});\n\nexport const { actions: createAlertActions } = allAlertSlice;\nexport default allAlertSlice.reducer;\n\nexport const UseAllAlertSlice = () => {\n  useInjectReducer({\n    key: allAlertSlice.name,\n    reducer: allAlertSlice.reducer,\n  });\n  useInjectSaga({\n    key: allAlertSlice.name,\n    saga: getAlertSaga,\n  });\n  return { actions: allAlertSlice.actions };\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nimport { initialState } from '../slice';\n\nconst selectDomain = (state) => state.allAlerts || initialState;\n\nexport const selectAllAlerts = createSelector(\n  [selectDomain],\n  (allAlerts) => allAlerts.allAlerts\n);\nexport const selectTotalAlerts = createSelector(\n  [selectDomain],\n  (allAlerts) => allAlerts.totalAlerts\n);\nexport const selectLoading = createSelector(\n  [selectDomain],\n  (allAlerts) => allAlerts.loading\n);\n\nexport const selectError = createSelector(\n  [selectDomain],\n  (allAlerts) => allAlerts.error\n);\n\nexport const selectSuccess = createSelector(\n  [selectDomain],\n  (allAlerts) => allAlerts.success\n);\n","import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\n\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Pagination,\n  Paper,\n  Typography,\n  IconButton,\n  PaginationItem,\n} from '@mui/material';\n\nimport CreateOutlinedIcon from '@mui/icons-material/CreateOutlined';\nimport ReplayIcon from '@mui/icons-material/Replay';\nimport DeleteOutlinedIcon from '@mui/icons-material/DeleteOutlined';\n\nimport { UseAllAlertSlice } from './slice/index';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectAllAlerts,\n  selectLoading,\n  selectTotalAlerts,\n} from './slice/selectors';\nimport { selectLoading as selectCreateAlertLoading } from '../CreateAlert/slice/selectors';\nimport Loader from 'components/Loader';\nimport { UseCreateAlertSlice } from '../CreateAlert/slice/index';\nimport { Link, useLocation } from 'react-router-dom';\n\nconst headCells = [\n  {\n    id: 'name',\n    align: 'center',\n    disablePadding: true,\n    label: 'Name',\n  },\n  {\n    id: 'priceSignal',\n    align: 'center',\n    disablePadding: false,\n    label: 'Price Signal',\n  },\n  {\n    id: 'criteria',\n    align: 'center',\n    disablePadding: false,\n    label: 'Criteria',\n  },\n  {\n    id: 'value',\n    align: 'center',\n    disablePadding: false,\n    label: 'Value',\n  },\n  {\n    id: 'email',\n    align: 'center',\n    disablePadding: false,\n    label: 'Email',\n  },\n  {\n    id: 'alertDays',\n    align: 'center',\n    disablePadding: false,\n    label: 'Active Days',\n  },\n  {\n    id: 'actions',\n    align: 'center',\n    disablePadding: false,\n    label: 'Actions',\n  },\n];\n\nfunction AlertTableHead() {\n  return (\n    <TableHead>\n      <TableRow>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.align}\n            padding={headCell.disablePadding ? 'none' : 'normal'}\n            sx={{ py: 2 }}\n          >\n            {headCell.label}\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nAlertTableHead.propTypes = {\n  order: PropTypes.string,\n  orderBy: PropTypes.string,\n};\n\nexport default function AlertTable() {\n  const { actions } = UseAllAlertSlice();\n  const location = useLocation();\n  UseCreateAlertSlice();\n  const dispatch = useDispatch();\n  const [order] = useState('asc');\n  const [orderBy] = useState('trackingNo');\n  const [pageNum, setPageNum] = useState(1);\n  const allAlerts = useSelector(selectAllAlerts);\n  const loading = useSelector(selectLoading);\n  const totalAlerts = useSelector(selectTotalAlerts);\n  const loadingCreateAlert = useSelector(selectCreateAlertLoading);\n  useEffect(() => {\n    dispatch(actions.fetch({ pageNum: 1 }));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadingCreateAlert]);\n\n  useEffect(() => {\n    var pageNumber = parseInt(location.search.split('=')[1]);\n    dispatch(actions.fetch({ pageNum: pageNumber }));\n    setPageNum(pageNumber);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location.search]);\n\n  return (\n    <Box sx={{ padding: '0 1rem' }}>\n      {loading ? (\n        <Loader />\n      ) : allAlerts && allAlerts.length === 0 ? (\n        <Typography variant='h2' component='h2' sx={{ my: 7 }}>\n          No Alerts Saved\n        </Typography>\n      ) : (\n        <Box>\n          <Box\n            sx={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n              padding: '1rem 0',\n            }}\n          >\n            <ButtonGroup>\n              <Button variant='contained' sx={{ marginRight: '1rem' }}>\n                Alerts\n              </Button>\n              <Button variant='outlined'>Triggered Alerts</Button>\n            </ButtonGroup>\n            <IconButton onClick={() => dispatch(actions.fetch({ pageNum: 1 }))}>\n              <ReplayIcon />\n            </IconButton>\n          </Box>\n          <TableContainer\n            sx={{\n              width: '100%',\n              overflowX: 'auto',\n              position: 'relative',\n              display: 'block',\n              maxWidth: '100%',\n              '& td, & th': { whiteSpace: 'nowrap' },\n            }}\n            component={Paper}\n          >\n            <Table\n              aria-labelledby='tableTitle'\n              size='small'\n              sx={{\n                '& .MuiTableCell-root:first-of-type': {\n                  pl: 2,\n                },\n                '& .MuiTableCell-root:last-child': {\n                  pr: 3,\n                },\n              }}\n            >\n              <AlertTableHead order={order} orderBy={orderBy} />\n              <TableBody>\n                {allAlerts.map((row, index) => {\n                  return (\n                    <TableRow\n                      hover\n                      sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                      tabIndex={-1}\n                      key={index}\n                    >\n                      {Object.entries(row).map((keyValue) => {\n                        if (\n                          keyValue[0] === 'name' ||\n                          keyValue[0] === 'priceSignal' ||\n                          keyValue[0] === 'criteria' ||\n                          keyValue[0] === 'value' ||\n                          keyValue[0] === 'email' ||\n                          keyValue[0] === 'alertDays'\n                        )\n                          return (\n                            <TableCell\n                              key={keyValue[0]}\n                              align='center'\n                              sx={{ py: 0 }}\n                            >\n                              {keyValue[1]}\n                            </TableCell>\n                          );\n                        if (keyValue[0] === 'phone')\n                          return (\n                            <TableCell\n                              key={keyValue[0]}\n                              align='center'\n                              sx={{ py: 0 }}\n                            >\n                              <IconButton>\n                                <CreateOutlinedIcon />\n                              </IconButton>\n                              <IconButton\n                                onClick={() =>\n                                  dispatch(\n                                    actions.delete({ id: row._id, pageNum })\n                                  )\n                                }\n                              >\n                                <DeleteOutlinedIcon />\n                              </IconButton>\n                            </TableCell>\n                          );\n                        return (\n                          <TableCell\n                            key={keyValue[0]}\n                            sx={{ display: 'none' }}\n                          ></TableCell>\n                        );\n                      })}\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n            <Box sx={{ margin: '10px' }}>\n              <Pagination\n                count={Math.ceil(totalAlerts / 10)}\n                variant='outlined'\n                shape='rounded'\n                sx={{ display: 'flex', justifyContent: 'end' }}\n                renderItem={(item) => (\n                  <PaginationItem\n                    component={Link}\n                    to={item.page === 1 ? '' : `?page=${item.page}`}\n                    {...item}\n                  />\n                )}\n              />\n            </Box>\n          </TableContainer>\n        </Box>\n      )}\n    </Box>\n  );\n}\n","import { call, put, takeLatest, delay, select } from 'redux-saga/effects';\nimport { createAlertActions as actions } from '../slice';\nimport { request } from 'utils/request';\nimport { selectToken } from 'pages/Login/slice/selectors';\n\nconst createAlert = function* (action) {\n  delay(10);\n  try {\n    const requestURL = '/api/alert';\n    const token = yield select(selectToken);\n    if (token === '') {\n      yield put(actions.failed('No Token found'));\n    } else {\n      yield call(request, requestURL, {\n        method: 'post',\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n        data: {\n          name: action.payload.name,\n          phone: action.payload.phone,\n          email: action.payload.email,\n          criteria: action.payload.criteria,\n          value: action.payload.value,\n          alertDays: action.payload.alertDays,\n          priceSignal: action.payload.priceSignal,\n        },\n      });\n      yield put(actions.success());\n    }\n  } catch (error) {\n    process.env.NODE_ENV === 'development' && console.log(error);\n    yield put(\n      actions.failed(\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message\n      )\n    );\n  }\n};\n\nexport const createAlertSaga = function* () {\n  yield takeLatest(actions.start.type, createAlert);\n};\n","import { createSlice } from '@reduxjs/toolkit';\nimport { useInjectReducer, useInjectSaga } from 'redux-injectors';\nimport { createAlertSaga } from './saga';\n\nexport const initialState = {\n  loading: false,\n  error: '',\n  success: false,\n};\n\nconst createAlertSlice = createSlice({\n  name: 'createAlert',\n  initialState,\n  reducers: {\n    start(state, action) {\n      state.loading = true;\n    },\n    success(state, action) {\n      state.error = '';\n      state.loading = false;\n      state.success = true;\n    },\n    failed(state, action) {\n      state.error = action.payload;\n      state.loading = false;\n    },\n    reset(state, action) {\n      state.error = '';\n      state.loading = false;\n      state.success = false;\n    },\n  },\n});\n\nexport const { actions: createAlertActions } = createAlertSlice;\nexport default createAlertSlice.reducer;\n\nexport const UseCreateAlertSlice = () => {\n  useInjectReducer({\n    key: createAlertSlice.name,\n    reducer: createAlertSlice.reducer,\n  });\n  useInjectSaga({\n    key: createAlertSlice.name,\n    saga: createAlertSaga,\n  });\n  return { actions: createAlertSlice.actions };\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nimport { initialState } from '../slice';\n\nconst selectDomain = (state) => state.createAlert || initialState;\n\nexport const selectLoading = createSelector(\n  [selectDomain],\n  (createAlert) => createAlert.loading\n);\n\nexport const selectError = createSelector(\n  [selectDomain],\n  (createAlert) => createAlert.error\n);\n\nexport const selectSuccess = createSelector(\n  [selectDomain],\n  (createAlert) => createAlert.success\n);\n"],"names":["fetchAlert","action","delay","pageNum","payload","requestURL","select","selectToken","token","put","actions","call","request","method","headers","Authorization","data","response","message","deleteStart","_id","id","getAlertSaga","takeLatest","initialState","allAlerts","totalAlerts","loading","error","success","allAlertSlice","createSlice","name","reducers","fetch","state","done","failed","reset","delete","createAlertActions","selectDomain","selectAllAlerts","createSelector","selectTotalAlerts","selectLoading","headCells","align","disablePadding","label","AlertTableHead","TableHead","TableRow","map","headCell","TableCell","padding","sx","py","AlertTable","useInjectReducer","key","reducer","useInjectSaga","saga","location","useLocation","UseCreateAlertSlice","dispatch","useDispatch","useState","order","orderBy","setPageNum","useSelector","loadingCreateAlert","selectCreateAlertLoading","useEffect","pageNumber","parseInt","search","split","Box","Loader","length","Typography","variant","component","my","display","justifyContent","alignItems","ButtonGroup","Button","marginRight","IconButton","onClick","Replay","TableContainer","width","overflowX","position","maxWidth","whiteSpace","Paper","Table","size","pl","pr","TableBody","row","index","hover","border","tabIndex","Object","entries","keyValue","CreateOutlined","DeleteOutlined","margin","Pagination","count","Math","ceil","shape","renderItem","item","PaginationItem","Link","to","page","createAlert","phone","email","criteria","value","alertDays","priceSignal","createAlertSaga","createAlertSlice","start","selectError","selectSuccess"],"sourceRoot":""}